provider.tf  :-

provider "aws" {
  region  = "us-east-1"
  profile = "tf-pro"

}

main.tf :-

# VPC creation
resource "aws_vpc" "my-vpc" {
  cidr_block = "10.0.0.0/16"
  tags = {
    Name = "my-vpc VPC"
  }
}
# Public Subnet
resource "aws_subnet" "pub-sub" {
  vpc_id                  = aws_vpc.my-vpc.id
  cidr_block              = "10.0.1.0/24"
  map_public_ip_on_launch = "true"
  availability_zone       = "us-east-1a"
  tags = {
    Name = "Public subnet"
  }
}
# Private Subnet
resource "aws_subnet" "pvt-sub" {
  vpc_id                  = aws_vpc.my-vpc.id
  cidr_block              = "10.0.2.0/24"
  map_public_ip_on_launch = "false"
  availability_zone       = "us-east-1a"
  tags = {
    Name = "Private subnet"
  }
}
# Internet gateway
resource "aws_internet_gateway" "my-igw" {
  vpc_id = aws_vpc.my-vpc.id
  tags = {
    Name = "My internet gateway"
  }
}
# Route table for public subnet
resource "aws_route_table" "pub-rt" {
  vpc_id = aws_vpc.my-vpc.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.my-igw.id
  }
  tags = {
    Name = "Public route table"
  }

}
# Associate public subnet in public route table
resource "aws_route_table_association" "pub-rt-pub-sub-asso" {
  subnet_id      = aws_subnet.pub-sub.id
  route_table_id = aws_route_table.pub-rt.id
}
# Creating elastic-ip for NAT gateway
resource "aws_eip" "my-eip" {
  vpc        = true
  depends_on = [aws_internet_gateway.my-igw]
  tags = {
    Name = "My NAT gateway elastic-ip"
  }

}
# Creating NAT gateway
resource "aws_nat_gateway" "nat-gateway" {
  allocation_id = aws_eip.my-eip.id
  subnet_id     = aws_subnet.pub-sub.id
  tags = {
    name = "My nat-gateway"
  }

}
# Creating private route table
resource "aws_route_table" "pvt-rt" {
  vpc_id = aws_vpc.my-vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_nat_gateway.nat-gateway.id
  }

  tags = {
    Name = "Private Route Table"
  }
}
# Associate private subnet in private route table
resource "aws_route_table_association" "pvt-rt-pvt-sub-asso" {
  subnet_id      = aws_subnet.pvt-sub.id
  route_table_id = aws_route_table.pvt-rt.id
}
# Create security group
resource "aws_security_group" "sec-grp" {
  description = "Allow  inbound traffic"
  vpc_id      = aws_vpc.my-vpc.id
  name        = "ec2-pvt-sg"

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]

  }

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]

  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]

  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = {
    Name = "security-sg"
  }
}
output "aws_security_gr_id" {
  value = aws_security_group.sec-grp.id
}

# Creating ec2 instance in public subnet
resource "aws_instance" "pub-inst" {
  ami                         = "ami-007855ac798b5175e"
  instance_type               = "t2.micro"
  vpc_security_group_ids      = ["${aws_security_group.sec-grp.id}"]
  subnet_id                   = aws_subnet.pub-sub.id
  associate_public_ip_address = true
  tags = {
    Name = "public-instance"
  }
}
# Creating ec2 instance in private subnet
resource "aws_instance" "pvt-inst" {
  ami                         = "ami-007855ac798b5175e"
  instance_type               = "t2.micro"
  vpc_security_group_ids      = ["${aws_security_group.sec-grp.id}"]
  subnet_id                   = aws_subnet.pvt-sub.id
  associate_public_ip_address = false
  tags = {
    Name = "private-instance"
  }
}
